name :

first need to be name it must start with a period 
		example = strncmp(&line[0], "same", 5 and max 128 bytes inside quotes 

comment :
	same as name, the only diff is that you are allow to have 2048 bytes

label :
types of arguments 

A Indirect:
			is a normal number for example "ld 4<--- this, r2
			interpreted as "ld (PC + 4), r2 (PC is a register explained in register section). Is = as C memory adress 

A Direct:
			a literal number "ld %4, r3?: 

A register:
			"ld r2, r5" this mean r = register;


Direct label call : ld %:<label name>, r7
Indirect label call : lld :<label name>, r7

<op code> <destination arg> <source arg>

code example:

.name "zork"
.comment "just a basic living prog"
l2: sti r1, %:live, %0 #any comment_1
and r1, %0, r1
#any comment_2
live: live %1
zjmp %:live


/*****************************/
Header without padding :

Part NB		Part						size in byte
1			magi number					4	
2			name						128
3			instruction section size	4
4			comment						2048

/**********************************/
Header with paddings:
Part NB		Part						Size in byte
1			Magic number				4
2			Name						128
3			Padding 1					4
4			Instruction secton size		4
5			Comment						2048
6			Padding 2					4 byte




	Instruction table 
01	live	0x01	NO		NO		1	4		Live %3
02	ld		0x02	yes		YES		2	vary	ld 34, r3
03	st		0x03	yes		NO		2	?		st r4, 34
04	add		0x04	yes		YES		3	3		add r2 ,r3, r5
05	sub		0x05	yes		YES		3	3		add r2 ,r3, r5
06	and		0x06	yes		YES		3	3		and r2, r3, r5
07	or		0x07	yes		YES		3	3		or r2, r3, r5
08	xor		0x08	yes		YES		3	3		xor r2, r3, r5
09	zjmp	0x09	NO		NO		1	1		zjmp %23
10	ldi		0x0a	yes		NO		3	?		ldi 3, %4, r1
11	sti		0x0b	yes		NO		3	?		sti r2, %4, %5
12	fork	0x0c	NO		NO		1	1		fork %4
13	lld		0x0d	yes		YES		2	vary	lld 34, r3
14	lldi	0x0e	yes		YES		3	?		lldi 3, %4, r1
15	lfork	0x0f	NO		NO		1	1		lfork %4
16	aff		0x10	yes		NO		1	vary	aff r3


if (type & (T-reG | T_DIR))

	
